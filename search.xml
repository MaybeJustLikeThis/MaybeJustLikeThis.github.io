<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react学习日记(二期)</title>
      <link href="/2024/09/12/react%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0(%E4%BA%8C%E6%9C%9F)/"/>
      <url>/2024/09/12/react%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0(%E4%BA%8C%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts笔记（四期）</title>
      <link href="/2024/09/09/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%E6%9C%9F%EF%BC%89/"/>
      <url>/2024/09/09/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%E6%9C%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>自ECMAScript 2015起，symbol成为了一种新的原生类型，就像number和string一样。<br>symbol类型的值是通过Symbol构造函数创建的。</p><p>可以传递参做为唯一标识 只支持 string 和 number类型的参数</p><h2 id="使用symbol定义的属性，是不能通过如下方式遍历拿到的"><a href="#使用symbol定义的属性，是不能通过如下方式遍历拿到的" class="headerlink" title="使用symbol定义的属性，是不能通过如下方式遍历拿到的"></a>使用symbol定义的属性，是不能通过如下方式遍历拿到的</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;777&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj1= &#123;</span><br><span class="line">   [symbol1]: <span class="string">&#x27;小满&#x27;</span>,</span><br><span class="line">   [symbol2]: <span class="string">&#x27;二蛋&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">   <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 for in 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">   <span class="comment">// 注意在console看key,是不是没有遍历到symbol1</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 Object.keys 遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 getOwnPropertyNames</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj1))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 JSON.stringfy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1))</span><br></pre></td></tr></table></figure><p>可以通过以下两种方法拿到：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 es6 的 Reflect 拿到对象的所有属性</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1));</span><br></pre></td></tr></table></figure><h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><p>支持遍历大部分类型迭代器 arr nodeList argumetns set map 等</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">array</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Item</span>&gt; = [&#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;1&quot;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;2&quot;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;3&quot;</span> &#125;]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> mapTypes = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">map</span>:<span class="title class_">Map</span>&lt;mapTypes,mapTypes&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"> </span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;王爷&#x27;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;陆北&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">aaa</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">bbb</span>:<span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">set</span>:<span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">// let it:Iterator&lt;Item&gt; = array[Symbol.iterator]()</span></span><br><span class="line"><span class="keyword">const</span> gen = (<span class="attr">erg</span>:<span class="built_in">any</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">it</span>: <span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; = erg[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">next</span>:<span class="built_in">any</span>= &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">        next =  it.<span class="title function_">next</span>()</span><br><span class="line">        <span class="keyword">if</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">gen</span>(array)</span><br></pre></td></tr></table></figure><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>平时开发中最常用的就是for of</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组解构的原理其实也是调用迭代器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> x = [...xxxx]</span><br></pre></td></tr></table></figure><p>那我们可以自己实现一个迭代器让对象支持for or</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">max</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">current</span>: <span class="number">0</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">max</span>: <span class="variable language_">this</span>.<span class="property">max</span>,</span><br><span class="line">            <span class="attr">current</span>: <span class="variable language_">this</span>.<span class="property">current</span>,</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span> == <span class="variable language_">this</span>.<span class="property">max</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">                        <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">current</span>++,</span><br><span class="line">                        <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> obj) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react学习日记</title>
      <link href="/2024/09/04/react%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/09/04/react%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>之前大二暑假时候学过react18,不过是class类型的,最近在工作中遇到了用react重构的需求,现在捡起来重新学一下最新的react18用函数类型（没有需求没有动力）</p><p>不多说,上代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;<span class="comment">//定义主组件</span></span><br><span class="line">  <span class="keyword">const</span> [advice, setAdvice] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAdvice</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="title function_">setAdvice</span>(data.<span class="property">slip</span>.<span class="property">advice</span>);</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义useEffect进行初始化,useEffect 钩子在组件挂载时调用getAdvice函数,以获取初始的建议数据。空数组[]作为第二个参数,确保该副作用只在组件挂载时执行一次。</span></span><br><span class="line">    <span class="title function_">getAdvice</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;advice&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&#123;getAdvice&#125;</span>&gt;</span>Get advice<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Message</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Message</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params">props</span>) &#123;<span class="comment">//简单的函数组件</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      you have read <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;props.count&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> pieces of advice</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="jsx基本语法"><a href="#jsx基本语法" class="headerlink" title="jsx基本语法"></a>jsx基本语法</h3><ul><li>变量绑定<ul><li>在html标签中使用{},内可绑定字符串,数字,数组（基本类型）,html元素,三元表达式, API调用</li></ul></li><li>插值语法如果非要展示对象类型的话,使用JSON.stringfy();</li><li>事件绑定 驼峰 onClick ,如果需要传参数使用高阶函数,不需要直接就传函数体</li><li>如使用泛型<T>,他会把泛型理解成一个dom,纠正泛型<T></li><li>绑定class需要用className,多个class 需要 模版字面量 中间间隔空格 ,id就正常</li><li>添加html片段 <code> &lt;div dangerouslySetInnerHTML=&#123;&#123; __html: value &#125;&#125;&gt;&lt;/div&gt;</code></li><li>遍历dom   <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>条件渲染<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   flag ? <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>真的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>假的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="useEffect-effect-dependencies"><a href="#useEffect-effect-dependencies" class="headerlink" title="useEffect(effect, dependencies)"></a>useEffect(effect, dependencies)</h3><ul><li>effect：一个函数,包含你想要执行的副作用代码。</li><li>dependencies：一个数组,包含依赖项。当数组中的任何一个值发生变化时,effect 函数会重新执行。如果传入一个空数组 [],effect 函数只会在组件挂载和卸载时执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts笔记（三期）</title>
      <link href="/2024/09/02/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%E6%9C%9F%EF%BC%89/"/>
      <url>/2024/09/02/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%E6%9C%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>例如 红绿蓝 Red &#x3D; 0 Green &#x3D; 1 Blue&#x3D; 2 分别代表红色0 绿色为1 蓝色为2</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span>,</span><br><span class="line">   <span class="title class_">Green</span>,</span><br><span class="line">   <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始的所以也就是</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认就是从0开始的 可以不写值</span></span><br></pre></td></tr></table></figure><p>增长枚举</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">Green</span>,</span><br><span class="line">   <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们定义了一个数字枚举， Red使用初始化为 1。 其余的成员会从 1开始自动增长。 换句话说， Type.Red的值为 1， Green为 2， Blue为 3。</p><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><p>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><p>枚举可以混合字符串和数字成员</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口枚举"><a href="#接口枚举" class="headerlink" title="接口枚举"></a>接口枚举</h3><p>定义一个枚举Types 定义一个接口A 他有一个属性red 值为Types.yyds</p><p>声明对象的时候要遵循这个规则</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">   yyds,</span><br><span class="line">   dddd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:A = &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><p>let  和 var 都是不允许的声明只能使用const</p><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义</p><p>const 声明的枚举会被编译成常量</p><p>普通声明的枚举编译完后是个对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Const 声明编译之后</p><p> 普通声明编译之后</p><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>它包含了正向映射（ name -&gt; value）和反向映射（ value -&gt; name）</p><p>要注意的是 不会为字符串枚举成员生成反向映射。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">   fall</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Enum</span>.<span class="property">fall</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> nameOfA = <span class="title class_">Enum</span>[a]; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameOfA); <span class="comment">//fall</span></span><br></pre></td></tr></table></figure><p>原文地址：<a href="https://xiaoman.blog.csdn.net/article/details/122380754">https://xiaoman.blog.csdn.net/article/details/122380754</a></p><h2 id="类型推论与类型别名"><a href="#类型推论与类型别名" class="headerlink" title="类型推论与类型别名"></a>类型推论与类型别名</h2><p>当我声明了一个变量但是没有定义类型，ts会自己推测出一个类型，这就是类型推论</p><p>如果你只有声明了，但是没有赋值，ts会推测出是一个any类型 </p><h4 id="定义类型别名"><a href="#定义类型别名" class="headerlink" title="定义类型别名"></a>定义类型别名</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str =（<span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:str = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"></span><br><span class="line">consloe.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure><h4 id="定义函数别名"><a href="#定义函数别名" class="headerlink" title="定义函数别名"></a>定义函数别名</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="function">()=&gt;</span><span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:str = () = &gt;<span class="string">&quot;111&quot;</span>;</span><br><span class="line"></span><br><span class="line">consloe.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure><h4 id="定义联合类型别名"><a href="#定义联合类型别名" class="headerlink" title="定义联合类型别名"></a>定义联合类型别名</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="number">123</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>: str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,s2);</span><br></pre></td></tr></table></figure><h4 id="定义值的别名"><a href="#定义值的别名" class="headerlink" title="定义值的别名"></a>定义值的别名</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;213&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:value = <span class="literal">true</span></span><br><span class="line"><span class="comment">//变量s的值  只能是上面value定义的值</span></span><br></pre></td></tr></table></figure><h3 id="type-和-interface-还是一些区别的-虽然都可以定义类型"><a href="#type-和-interface-还是一些区别的-虽然都可以定义类型" class="headerlink" title="type 和 interface 还是一些区别的 虽然都可以定义类型"></a>type 和 interface 还是一些区别的 虽然都可以定义类型</h3><p>1.interface可以继承  type 只能通过 &amp; 交叉类型合并</p><p>2.type 可以定义 联合类型 和 可以使用一些操作符 interface不行</p><p>3.interface 遇到重名的会合并 type 不行</p><h3 id="type高级用法"><a href="#type高级用法" class="headerlink" title="type高级用法"></a>type高级用法</h3><p>左边的值会作为右边值的子类型遵循图中上下的包含关系</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> a = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> a = <span class="number">1</span> <span class="keyword">extends</span> <span class="title class_">Number</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> a = <span class="number">1</span> <span class="keyword">extends</span> <span class="title class_">Object</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> a = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> a = <span class="number">1</span> <span class="keyword">extends</span> unknow ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> a = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">never</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p><img src="https://yunding-ljt.oss-cn-beijing.aliyuncs.com/202409091623827.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恭喜EDG！恭喜cn瓦！</title>
      <link href="/2024/08/25/%E6%81%AD%E5%96%9CEDG%EF%BC%81%E6%81%AD%E5%96%9Ccn%E7%93%A6%EF%BC%81/"/>
      <url>/2024/08/25/%E6%81%AD%E5%96%9CEDG%EF%BC%81%E6%81%AD%E5%96%9Ccn%E7%93%A6%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>EDG这个冠军的含金量真是无敌的。cn赛区的队伍两支在小组赛垫底回家，一支倒在八强的内战中，整个赛区剩下EDG一根赛区独苗。然后EDG在最不被人看好的时候打满两个BO3，连斩两支美洲的队伍，决赛面对青春风暴硬是杀出一条血路，踩着欧美人拿下fps项目的冠军，最重要的是甚至还是全华班。这放爽文里都是高光时刻的历程让EDG在现实里打出来了，真是完全复刻冰岛+仁川，尤其是康康，无数次拯救队伍，今年的他就是世界最佳选手，只要瓦这游戏正常发展个四五年不暴似，凭康康这次冠军赛的表现，就已经预订了cn电竞的传奇选手称号。</p><p>看了一下午的总决赛，以后还是要少看，太惊险刺激了，心脏受不了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts笔记（二期）</title>
      <link href="/2024/08/21/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E6%9C%9F%EF%BC%89/"/>
      <url>/2024/08/21/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%E6%9C%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>下面是一个简易的vue用class写的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span> &#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="built_in">string</span> | <span class="title class_">HTMLElement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">VueCls</span>&#123;</span><br><span class="line">options :options</span><br><span class="line"><span class="title function_">init</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Vnode</span>&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="built_in">string</span></span><br><span class="line">    text?:<span class="built_in">string</span></span><br><span class="line">    children?.<span class="property">Vnode</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 虚拟dom</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dom</span>&#123;</span><br><span class="line">    <span class="comment">//创建节点的节点</span></span><br><span class="line">    <span class="title function_">createElement</span>(<span class="params"><span class="attr">el</span>:<span class="built_in">string</span> </span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">createElement</span>(el)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//填充文本的方法</span></span><br><span class="line">    <span class="title function_">setText</span>(<span class="params"><span class="attr">el</span>:<span class="title class_">HTMLElement</span>,<span class="attr">text</span>:<span class="built_in">string</span> | <span class="literal">null</span></span>)&#123;</span><br><span class="line">        el.<span class="property">textContent</span> = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"><span class="attr">data</span>:<span class="title class_">Vnode</span></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> root = <span class="variable language_">this</span>.<span class="title function_">createElement</span>(data.<span class="property">tag</span>)</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="property">chlidren</span> &amp;&amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(data.<span class="property">children</span>))&#123;</span><br><span class="line">            data.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;  </span><br><span class="line">              <span class="keyword">let</span> child =   <span class="variable language_">this</span>.<span class="title function_">render</span>(item);</span><br><span class="line">              root.<span class="title function_">appendChild</span>(child)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setText</span>(root,data.<span class="property">text</span>) </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dom</span> <span class="keyword">implements</span> <span class="title class_">VueCls</span>&#123;</span><br><span class="line">    <span class="attr">options</span>:<span class="title class_">Options</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">options</span>:<span class="title class_">Options</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">init</span>():<span class="built_in">void</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">data</span>:<span class="title class_">Vnode</span> =&#123;</span><br><span class="line">            <span class="attr">tag</span>:<span class="string">&quot;div&quot;</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">tag</span>:<span class="string">&quot;section&quot;</span>,</span><br><span class="line">                    <span class="attr">text</span>:<span class="string">&quot;子节点一&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">tag</span>:<span class="string">&quot;section&quot;</span>,</span><br><span class="line">                    <span class="attr">text</span>:<span class="string">&quot;子节点二&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> app = <span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">el</span> == <span class="string">&#x27;string&#x27;</span> ?  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">el</span>) : <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">el</span>;</span><br><span class="line"></span><br><span class="line">        app.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="title function_">render</span>(data));</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类是面向对象编程中的一个重要概念，主要用于定义一组接口和共享的行为，同时不提供具体实现。以下是关于抽象类的一些要点和示例：</p><ol><li>定义<br>抽象类: 不能被实例化的类，通常包含一个或多个抽象方法（没有具体实现）。<br>目的: 强制子类实现某些方法，并提供基本的共享功能。</li><li>特性<br>可以包含具体方法（有实现）和抽象方法（无实现）。<br>子类必须实现所有的抽象方法，除非子类也是抽象类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts笔记（一期）</title>
      <link href="/2024/08/21/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%E6%9C%9F%EF%BC%89/"/>
      <url>/2024/08/21/ts%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%E6%9C%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h1><h2 id="标识符的类型推导"><a href="#标识符的类型推导" class="headerlink" title="标识符的类型推导"></a>标识符的类型推导</h2><p>let 进行类型推导,推导出来的通用类型<br>const 进行类型推导,推导出来的字面量类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"><span class="comment">//message 已经被推断为了 字符串类型</span></span><br></pre></td></tr></table></figure><h2 id="ts-的数据类型"><a href="#ts-的数据类型" class="headerlink" title="ts 的数据类型"></a>ts 的数据类型</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>明确的指定 数组的 类型注解</p><p>在 ts 中 数组中一般存放<strong>相同类型</strong>的数据</p><ol><li>第一种写法 string[ ];</li><li>第二种 Array<T> 泛型</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数 要求传入值最好确定类型 返回值可以进行类型推断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1: number, num2: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 TypeScript 中，你可以使用函数类型来定义函数的类型和结构。函数类型可以很灵活地定义参数和返回值的类型，这对于编写类型安全的代码非常有用。</p><p>以下是一些函数类型的示例：</p><p>定义函数类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数类型，接受两个参数并返回一个 number 类型的值</span></span><br><span class="line">type <span class="title class_">MyFunctionType</span> = <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用定义好的函数类型来声明一个变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myFunction</span>: <span class="title class_">MyFunctionType</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br></pre></td></tr></table></figure><p>函数类型作为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接受函数类型作为参数的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">executeOperation</span>(<span class="params">operation: (a: number, b: number) =&gt; number, x: number, y: number</span>): number &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">operation</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数，传入具体的函数作为参数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">executeOperation</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a \* b, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// result 的值为 12</span></span><br></pre></td></tr></table></figure><p>可选参数和默认参数<br>函数类型也可以包含可选参数和默认参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">ConcatenateStrings</span> = <span class="function">(<span class="params">a: string, b?: string</span>) =&gt;</span> string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">concat</span>: <span class="title class_">ConcatenateStrings</span> = <span class="function">(<span class="params">str1, str2 = <span class="string">&quot; World&quot;</span></span>) =&gt;</span> str1 + str2;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">concat</span>(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// 输出 &quot;Hello World&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">concat</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot; Fitten&quot;</span>)); <span class="comment">// 输出 &quot;Hello Fitten&quot;</span></span><br></pre></td></tr></table></figure><p>剩余参数<br>函数类型还可以使用剩余参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">JoinStrings</span> = <span class="function">(<span class="params">...str: string[]</span>) =&gt;</span> string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">join</span>: <span class="title class_">JoinStrings</span> = <span class="function">(<span class="params">...str</span>) =&gt;</span> str.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">join</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Fitten&quot;</span>, <span class="string">&quot;Code&quot;</span>)); <span class="comment">// 输出 &quot;Hello Fitten Code&quot;</span></span><br></pre></td></tr></table></figure><h3 id="unknown-类型"><a href="#unknown-类型" class="headerlink" title="unknown 类型"></a>unknown 类型</h3><p>在 TypeScript 或 JavaScript 中，”unknown” 是一种类型，它表示一个值可以是任何类型。与 “any” 类型不同的是，”unknown” 类型更为严格，因为它会强制你在使用它之前进行类型检查或类型断言。</p><p>以下是一个简单的示例，展示了如何使用 “unknown” 类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">value: unknown</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//类型缩小</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toFixed</span>(<span class="number">2</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Unsupported type&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myVar</span>: unknown = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="title function_">doSomething</span>(myVar); <span class="comment">// 输出 &quot;HELLO&quot;</span></span><br><span class="line"></span><br><span class="line">myVar = <span class="number">42</span>;</span><br><span class="line"><span class="title function_">doSomething</span>(myVar); <span class="comment">// 输出 &quot;42.00&quot;</span></span><br></pre></td></tr></table></figure><h3 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h3><p>在 TypeScript 或 JavaScript 中，”void” 是一种特殊的类型，用来表示函数没有返回值。如果一个函数不返回任何值，它的返回类型通常会被标记为 “void”。</p><p>以下是一个简单的示例，展示了如何使用 “void” 类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello there!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateSum</span>(<span class="params">a: number, b: number</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = a + b;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The sum is: &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们定义了两个函数 greet 和 calculateSum，它们的返回类型都被标记为 “void”，因为它们并不返回任何值。</p><h3 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h3><p>开发中很少定义never类型 ，开发框架时候可能会用到never类型;</p><p>封装类型工具时可能用到</p><p>给同事看的 ,在扩展工具时 对其他case直接报错</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5唤起app实现方案调研</title>
      <link href="/2024/08/20/H5%E5%94%A4%E8%B5%B7app%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E8%B0%83%E7%A0%94/"/>
      <url>/2024/08/20/H5%E5%94%A4%E8%B5%B7app%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="H5唤起app"><a href="#H5唤起app" class="headerlink" title="H5唤起app"></a>H5唤起app</h1><p>因为手机的原因，为了保护个人隐私信息，所以如何在保护个人隐私信息的情况下进行使用app，是H5和app开发者的关注点</p><p>智能手机应用了名为沙盒的机制，应用只能访问它声明可能访问的资源。但沙盒也阻碍了应用间合理的信息共享，某种程度上限制了应用的能力。</p><p>因此我们需要一种工具去实现应用通信， URL Scheme 就是这个工具。</p><h2 id="URL-Scheme"><a href="#URL-Scheme" class="headerlink" title="URL Scheme"></a>URL Scheme</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[scheme:][//authority][path][?query][#fragment]</span><br><span class="line">｜｜｜</span><br><span class="line">应用标识行为参数</span><br></pre></td></tr></table></figure><p>比如说， 我们拿 <code>https://www.baidu.com</code> 来举例，scheme 自然就是 <code>https</code> 了。</p><p>就像给服务器资源分配一个URL一样，以便我们去访问它一样，我们同样也可以给手机APP分配一个特殊格式的 URL，用来访问这个APP或者这个APP中的某个功能(来实现通信)。APP得有一个标识，好让我们可以定位到它，它就是 URL 的 Scheme 部分。</p><h4 id="常用APP的-URL-Scheme"><a href="#常用APP的-URL-Scheme" class="headerlink" title="常用APP的 URL Scheme"></a>常用APP的 URL Scheme</h4><table><thead><tr><th align="center">APP</th><th align="center">微信</th><th align="center">支付宝</th><th align="center">淘宝</th><th align="center">微博</th><th align="center">QQ</th><th align="center">知乎</th><th align="center">短信</th></tr></thead><tbody><tr><td align="center">URL Scheme</td><td align="center">weixin:&#x2F;&#x2F;</td><td align="center">alipay:&#x2F;&#x2F;</td><td align="center">taobao:&#x2F;&#x2F;</td><td align="center">sinaweibo:&#x2F;&#x2F;</td><td align="center">mqq:&#x2F;&#x2F;</td><td align="center">zhihu:&#x2F;&#x2F;</td><td align="center">sms:&#x2F;&#x2F;</td></tr></tbody></table><h4 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h4><p>安卓的原生谷歌浏览器自从 chrome25 版本开始对于唤端功能做了一些变化，URL Scheme 无法再启动Android应用。 例如，通过 iframe 指向 <code>weixin://</code>，即使用户安装了微信也无法打开。所以，APP需要实现谷歌官方提供的 <code>intent:</code> 语法</p><h4 id="Intent-语法"><a href="#Intent-语法" class="headerlink" title="Intent 语法"></a>Intent 语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">intent:</span><br><span class="line">   HOST/URI-path // Optional host </span><br><span class="line">   #Intent; </span><br><span class="line">      package=[string]; </span><br><span class="line">      action=[string]; </span><br><span class="line">      category=[string]; </span><br><span class="line">      component=[string]; </span><br><span class="line">      scheme=[string]; </span><br><span class="line">   end;</span><br></pre></td></tr></table></figure><p>如果用户未安装 APP，则会跳转到系统默认商店。当然，如果你想要指定一个唤起失败的跳转地址，添加下面的字符串在 <code>end;</code> 前就可以了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S.browser_fallback_url=[encoded_full_url]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方案调研 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京实习杂谈</title>
      <link href="/2024/08/19/%E5%8C%97%E4%BA%AC%E5%AE%9E%E4%B9%A0%E6%9D%82%E8%B0%88/"/>
      <url>/2024/08/19/%E5%8C%97%E4%BA%AC%E5%AE%9E%E4%B9%A0%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p>不知觉的，我已经来到北京独自生活月余了，大家都说，北京是一座能提升幸福感的城市，确实如此，来到过北京后，去哪个城市都很幸福。QAQ</p><h3 id="城市映像"><a href="#城市映像" class="headerlink" title="城市映像"></a>城市映像</h3><p>北京给我的第一感受，下了高铁之后的，扑面而来的感受 就是<strong>热</strong>，没错，7月份来到北京，给我最直观的感受就是热。北京的热不像是山西的热，山西的热你是可以暂避其锋芒的，而北京的热，非要形容的话，似是恶毒的泼皮蛮不讲理地燥热你的内心，炎热你的身体，使你汗流浃背，相比之下，山西的热最多算顽皮的小孩了。</p><p>在经过令人眩晕的热度之后，再仔细端详这座城市，他是如此低调，低调到我一度认为来到了某个县城，并没有想象中整洁宽广的大道，有的是不那么平整的街道；没有想象中街边行人光鲜亮丽的衣着，有的是许多不修边幅，疲惫之色溢于言表的过客；没有大城市的喧闹，有的是一种沉默的死寂，和同学走在路上，与同学们嬉笑的声音，仿佛是黑白画幅里的油彩，与这座城市格格不入，在那一刻我就知道，对于这座城市，我注定是过客。</p><p>之后在北京也算是游玩了不少地方，北京的知名景点也是去了不少，给我印象最深刻的还是天安门城楼:</p><img src="https://yunding-ljt.oss-cn-beijing.aliyuncs.com/202408191649971.png" style="zoom: 33%;" /><p>（原谅我菜鸡的拍摄技巧）</p><p>城楼有一股能让人安静下来的气场，使人安静下来，平和心态，主席的画像如此和蔼，使人感慨新中国成立的几十年风风雨雨，可能这就是历史的厚重感吧</p><h3 id="实习随笔"><a href="#实习随笔" class="headerlink" title="实习随笔"></a>实习随笔</h3><p>第一次来到这个规模不大不小的公司，说不紧张是假的，还好有个同行的伙伴一起，来到公司，也并没有我想象中的严格的工作要求，大家更像是比较有分寸的朋友，都保持了最基本的社交礼仪，在一起商量着推进项目，给我的感觉还是很友善的。</p><p>令人感到悲哀的是，北京有许许多多厉害的人物，985 211遍地走，各种有能力的大佬，使我大开眼界，只能说不愧华夏不愧四万万人民，各种各样的人才辈出，（老家的初中同学去参加巴黎奥运会了，震惊我100年），又深切体会到自己的菜，而在北京这个现实的城市中，难免又会胡思乱想，自己的前程似乎也走向了未知的地步…</p><p>可能我有点悲观了，但我似乎并不是一个悲观的人，是确切有东西改变了我的，是什么呢？我站在路口发问，可能回答我的只有秋风吧、、、</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
